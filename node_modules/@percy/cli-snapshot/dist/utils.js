"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withDefaults = withDefaults;
exports.serve = serve;
exports.mapPages = mapPages;

var _path = _interopRequireDefault(require("path"));

var pathToRegexp = _interopRequireWildcard(require("path-to-regexp"));

var _picomatch = _interopRequireDefault(require("picomatch"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Throw a better error message for invalid urls
function validURL(url, base) {
  try {
    return new URL(url, base);
  } catch (e) {
    throw new Error(`Invalid URL: ${e.input}`);
  }
} // Mutates a page item to have default or normalized options


function withDefaults(page, {
  host
}) {
  var _page;

  // allow URL strings as pages
  if (typeof page === 'string') page = {
    url: page
  }; // validate URL

  let url = validURL(page.url, host); // default name to the page url

  (_page = page).name || (_page.name = `${url.pathname}${url.search}${url.hash}`); // normalize the page url

  page.url = url.href;
  return page;
}

async function serve(dir, {
  dry,
  baseUrl,
  cleanUrls,
  rewrites = {}
}) {
  let host = 'http://localhost'; // reduce rewrite options with any base-url

  rewrites = Object.entries(rewrites).reduce((rewrites, [source, destination]) => (rewrites || []).concat({
    source,
    destination
  }), baseUrl ? [{
    source: _path.default.posix.join(baseUrl, '/:path*'),
    destination: '/:path*'
  }] : undefined); // start the server

  let server = !dry && (await new Promise(resolve => {
    let server = require('http').createServer((req, res) => {
      require('serve-handler')(req, res, {
        public: dir,
        cleanUrls,
        rewrites
      });
    }).listen(() => resolve(server));
  })); // easy clean up

  let close = () => {
    if (server) {
      return new Promise(resolve => {
        server.close(resolve);
      });
    }
  }; // add the port to the host and return


  if (server) host += `:${server.address().port}`;
  return {
    host,
    rewrites,
    server,
    close
  };
}

function mapPages(paths, {
  host,
  cleanUrls,
  rewrites = [],
  overrides = []
}) {
  // map, concat, and reduce rewrites with overrides into a single function
  let applyOverrides = [].concat({
    rewrite: url => _path.default.posix.normalize(_path.default.posix.join('/', url))
  }, rewrites.map(({
    source,
    destination
  }) => ({
    test: pathToRegexp.match(destination),
    rewrite: pathToRegexp.compile(source)
  })), {
    test: url => cleanUrls && url,
    rewrite: url => url.replace(/(\/index)?\.html$/, '')
  }, overrides.map(({
    files,
    ignore,
    ...opts
  }) => ({
    test: (0, _picomatch.default)(files || '**', {
      ignore: [].concat(ignore || [])
    }),
    override: page => Object.assign(page, opts)
  })), {
    override: page => withDefaults(page, {
      host
    })
  }).reduceRight((apply, {
    test,
    rewrite,
    override
  }) => {
    return (p, page = {
      url: p
    }) => {
      var _res$params, _apply;

      let res = !test || test(rewrite ? page.url : p);
      if (res && rewrite) page.url = rewrite(test ? (_res$params = res.params) !== null && _res$params !== void 0 ? _res$params : res : page.url);else if (res && override) override(page);
      return (_apply = apply === null || apply === void 0 ? void 0 : apply(p, page)) !== null && _apply !== void 0 ? _apply : page;
    };
  }, null); // sort and map pages with overrides

  return paths.sort().map(p => {
    return applyOverrides(p);
  });
}