"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Upload = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _cliCommand = _interopRequireWildcard(require("@percy/cli-command"));

var _logger = _interopRequireDefault(require("@percy/logger"));

var _globby = _interopRequireDefault(require("globby"));

var _imageSize = _interopRequireDefault(require("image-size"));

var _client = _interopRequireDefault(require("@percy/client"));

var _queue = _interopRequireDefault(require("@percy/core/dist/queue"));

var _resources = _interopRequireDefault(require("../resources"));

var _config = require("../config");

var _package = _interopRequireDefault(require("../../package.json"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ALLOWED_FILE_TYPES = /^\.(png|jpg|jpeg)$/i;

class Upload extends _cliCommand.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:upload'));
  }

  async run() {
    if (!this.isPercyEnabled()) {
      return this.log.info('Percy is disabled. Skipping upload');
    }

    let {
      dirname
    } = this.args;
    let {
      'dry-run': dry
    } = this.flags;

    if (!_fs.default.existsSync(dirname)) {
      return this.error(`Not found: ${dirname}`);
    } else if (!_fs.default.lstatSync(dirname).isDirectory()) {
      return this.error(`Not a directory: ${dirname}`);
    }

    let {
      upload: conf
    } = this.percyrc();
    this.queue = new _queue.default(conf.concurrency);
    let paths = await (0, _globby.default)(conf.files, {
      ignore: [].concat(conf.ignore || []),
      cwd: dirname
    });
    let l = paths.length;
    if (!l) this.error(`No matching files found in '${dirname}'`);
    paths.sort();
    this.client = new _client.default({
      clientInfo: `${_package.default.name}/${_package.default.version}`
    });

    if (dry) {
      this.log.info(`Found ${l} snapshot${l !== 1 ? 's' : ''}`);
    } else {
      let {
        data: build
      } = await this.client.createBuild();
      let {
        'build-number': number,
        'web-url': url
      } = build.attributes;
      this.build = {
        id: build.id,
        number,
        url
      };
      this.log.info('Percy has started!');
    }

    for (let filename of paths) {
      let file = _path.default.parse(filename);

      if (!ALLOWED_FILE_TYPES.test(file.ext)) {
        this.log.info(`Skipping unsupported file type: ${filename}`);
        continue;
      }

      let name = conf.stripExtensions ? _path.default.join(file.dir, file.name) : filename;
      if (dry) this.log.info(`Snapshot found: ${name}`);else this.snapshot(name, filename, dirname);
    }
  } // Push a snapshot upload to the queue


  snapshot(name, filename, dirname) {
    this.queue.push(`upload/${name}`, async () => {
      let filepath = _path.default.resolve(dirname, filename);

      let {
        width,
        height
      } = (0, _imageSize.default)(filepath);

      let buffer = _fs.default.readFileSync(filepath);

      await this.client.sendSnapshot(this.build.id, {
        // width and height is clamped to API min and max
        widths: [Math.max(10, Math.min(width, 2000))],
        minHeight: Math.max(10, Math.min(height, 2000)),
        resources: (0, _resources.default)(filename, buffer, width, height),
        name
      });
      this.log.info(`Snapshot uploaded: ${name}`);
    });
  } // Finalize the build when finished


  async finally(error) {
    var _this$build;

    if (!((_this$build = this.build) !== null && _this$build !== void 0 && _this$build.id)) return;
    if (error) this.queue.close(true);
    if (this.closing) return;
    this.closing = true;
    await this.queue.empty(len => {
      this.log.progress(`Uploading ${len}` + ` snapshot${len !== 1 ? 's' : ''}...`, !!len);
    });
    await this.client.finalizeBuild(this.build.id);
    this.log.info(`Finalized build #${this.build.number}: ${this.build.url}`);
  }

}

exports.Upload = Upload;

_defineProperty(Upload, "description", 'Upload a directory of images to Percy');

_defineProperty(Upload, "args", [{
  name: 'dirname',
  description: 'directory of images to upload',
  required: true
}]);

_defineProperty(Upload, "flags", { ..._cliCommand.flags.logging,
  ..._cliCommand.flags.config,
  files: _cliCommand.flags.string({
    char: 'f',
    multiple: true,
    description: 'one or more globs matching image file paths to upload',
    default: _config.schema.upload.properties.files.default,
    percyrc: 'upload.files'
  }),
  ignore: _cliCommand.flags.string({
    char: 'i',
    multiple: true,
    description: 'one or more globs matching image file paths to ignore',
    percyrc: 'upload.ignore'
  }),
  'strip-extensions': _cliCommand.flags.boolean({
    char: 'e',
    description: 'strips file extensions from snapshot names',
    percyrc: 'upload.stripExtensions'
  }),
  'dry-run': _cliCommand.flags.boolean({
    char: 'd',
    description: 'prints a list of matching images to upload without uploading'
  })
});

_defineProperty(Upload, "examples", ['$ percy upload ./images']);